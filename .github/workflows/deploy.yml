name: Build and Deploy

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      # Setup Go for backend
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Build Go backend
        run: |
          cd backend
          # Build for Windows target
          GOOS=windows GOARCH=amd64 go build -o app.exe
          # Copy frontend build to the backend/build directory
          mkdir -p build
          cp -r ../dist/* build/

      - name: Prepare for deployment
        run: |
          # Create deployment directory with backend and frontend
          mkdir -p deploy
          cp -r backend/app.exe deploy/
          cp -r backend/build deploy/
          cp -r backend/farm.db deploy/ || true
          # Create a batch file to start the app on Windows
          echo '@echo off' > deploy/start-app.bat
          echo 'set PORT=%PORT%' >> deploy/start-app.bat
          echo 'set JWT_SECRET=%JWT_SECRET%' >> deploy/start-app.bat
          echo 'app.exe' >> deploy/start-app.bat

          # Create PowerShell script for setting up the service
          cat > deploy/setup-service.ps1 << 'EOL'
          $ErrorActionPreference = "Continue"

          # Set environment variables
          [Environment]::SetEnvironmentVariable('PORT', '${{ secrets.PORT }}', 'Machine')
          [Environment]::SetEnvironmentVariable('JWT_SECRET', '${{ secrets.JWT_SECRET }}', 'Machine')

          # Try to stop existing service if running
          try {
            Stop-Service -Name GoAppService -ErrorAction SilentlyContinue
          } catch {
            Write-Host "No existing service found or could not stop it."
          }

          # Check if NSSM is available
          $nssmPath = ""
          if (Test-Path "C:\Program Files\nssm\nssm.exe") {
            $nssmPath = "C:\Program Files\nssm\nssm.exe"
          } elseif (Test-Path "C:\nssm\nssm.exe") {
            $nssmPath = "C:\nssm\nssm.exe"
          }

          if ($nssmPath -ne "") {
            # Create/update the service using NSSM
            Write-Host "Using NSSM to create service"
            & $nssmPath install GoAppService "$PSScriptRoot\app.exe"
            & $nssmPath set GoAppService AppDirectory "$PSScriptRoot"
            & $nssmPath set GoAppService AppEnvironmentExtra "PORT=${{ secrets.PORT }}" "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            & $nssmPath start GoAppService
          } else {
            # Fallback to running the batch file
            Write-Host "NSSM not found, running app directly"
            Start-Process -FilePath "$PSScriptRoot\start-app.bat" -WindowStyle Hidden
          }
          Write-Host "Setup complete!"
          EOL

      # Install necessary tools
      - name: Install SSH tools
        run: sudo apt-get install -y openssh-client sshpass

      # Deploy using password
      - name: Deploy with password
        run: |
          echo "Attempting deployment using password authentication..."
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Disable StrictHostKeyChecking for this deployment
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Try to use scp to copy files
          echo "Copying files with SCP..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -r -P ${{ secrets.SSH_PORT }} deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}

          # Run the setup script on the remote server
          echo "Running setup script..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && powershell -ExecutionPolicy Bypass -File setup-service.ps1"
        continue-on-error: true

      # Deploy using SSH key as fallback
      - name: Deploy with SSH key
        if: ${{ failure() }}
        run: |
          echo "Attempting deployment using SSH key authentication..."
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Try to use scp to copy files
          echo "Copying files with SCP..."
          scp -r -P ${{ secrets.SSH_PORT }} deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}

          # Run the setup script on the remote server
          echo "Running setup script..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && powershell -ExecutionPolicy Bypass -File setup-service.ps1"
        continue-on-error: true

      # Manual instructions if all else fails
      - name: Deployment failure instructions
        if: ${{ failure() }}
        run: |
          echo "Automated deployment failed. Please try manual deployment:"
          echo "1. Download artifacts from this build"
          echo "2. Copy files to your Windows server at: ${{ secrets.DEPLOY_PATH }}"
          echo "3. Run the setup-service.ps1 script with PowerShell or manually start app.exe"
