name: Build and Deploy

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      # Setup Go for backend
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Build Go backend
        run: |
          cd backend
          # Build for Windows target
          GOOS=windows GOARCH=amd64 go build -o app.exe
          # Copy frontend build to the backend/build directory
          mkdir -p build
          cp -r ../dist/* build/

      - name: Prepare for deployment
        run: |
          # Create deployment directory with backend and frontend
          mkdir -p deploy
          cp -r backend/app.exe deploy/
          cp -r backend/build deploy/
          cp -r backend/farm.db deploy/ || true
          # Create a batch file to start the app on Windows
          echo '@echo off' > deploy/start-app.bat
          echo 'set PORT=%PORT%' >> deploy/start-app.bat
          echo 'set JWT_SECRET=%JWT_SECRET%' >> deploy/start-app.bat
          echo 'app.exe' >> deploy/start-app.bat

      # Deploy via SSH with rsync
      - name: Install rsync
        run: sudo apt-get install -y rsync openssh-client sshpass

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        continue-on-error: true

      - name: Deploy with rsync
        run: |
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" deploy/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}
          else
            sshpass -p "${{ secrets.SSH_PASSWORD }}" rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" deploy/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}
          fi
        continue-on-error: true

      # Fallback to pure SCP if rsync fails
      - name: Fallback to SCP
        if: ${{ failure() }}
        run: |
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            scp -P ${{ secrets.SSH_PORT }} -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}
          else
            sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} -r deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}
          fi
        continue-on-error: true

      # Setup Windows Server
      - name: Setup on Windows server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Set environment variables (Windows command)
            powershell -Command "& {[Environment]::SetEnvironmentVariable('PORT', '${{ secrets.PORT }}', 'Machine'); [Environment]::SetEnvironmentVariable('JWT_SECRET', '${{ secrets.JWT_SECRET }}', 'Machine')}"

            # Stop existing service if running (using sc command for Windows)
            powershell -Command "& {Stop-Service -Name GoAppService -ErrorAction SilentlyContinue}"

            # Create a Windows service using sc (or fallback to running the batch file)
            powershell -Command "& {if(Get-Command nssm -ErrorAction SilentlyContinue) { 
              & nssm install GoAppService '${{ secrets.DEPLOY_PATH }}\app.exe'
              & nssm set GoAppService AppDirectory '${{ secrets.DEPLOY_PATH }}'
              & nssm set GoAppService AppEnvironmentExtra 'PORT=${{ secrets.PORT }}' 'JWT_SECRET=${{ secrets.JWT_SECRET }}'
              & nssm start GoAppService
            } else {
              Start-Process -FilePath '${{ secrets.DEPLOY_PATH }}\start-app.bat' -WindowStyle Hidden
            }}"
