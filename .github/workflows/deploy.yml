name: Build and Deploy

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Update API URLs to local
        run: |
          chmod +x ./update-api-urls.sh
          ./update-api-urls.sh

      - name: Build frontend
        run: npm run build
        env:
          VITE_API_URL: "/api/v1" # Use local API path for production

      # Setup Go for backend
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Build Go backend
        run: |
          cd backend
          # Build for Windows target
          GOOS=windows GOARCH=amd64 go build -o app.exe
          # Copy frontend build to the backend/build directory
          mkdir -p build
          cp -r ../dist/* build/

      - name: Prepare for deployment
        run: |
          # Create deployment directory with backend and frontend
          mkdir -p deploy
          cp -r backend/app.exe deploy/
          cp -r backend/build deploy/
          cp -r backend/farm.db deploy/ || true

          # Create a batch file to start the app on Windows with proper Windows line endings
          echo '@echo on' > deploy/start-app.bat
          echo 'set PORT=8080' >> deploy/start-app.bat
          echo 'set JWT_SECRET=your_secret_here' >> deploy/start-app.bat
          echo 'cd /d "%~dp0"' >> deploy/start-app.bat
          echo 'app.exe > app.log 2>&1' >> deploy/start-app.bat
          # Convert to Windows line endings
          sed -i 's/$/\r/' deploy/start-app.bat

          # Create PowerShell script for setting up the service
          echo 'Write-Host "Starting service setup..."' > deploy/setup-service.ps1
          echo '$ErrorActionPreference = "Continue"' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Debug - show current directory' >> deploy/setup-service.ps1
          echo 'Write-Host "Current directory: $pwd"' >> deploy/setup-service.ps1
          echo 'Write-Host "Listing files in current directory:"' >> deploy/setup-service.ps1
          echo 'Get-ChildItem' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Set environment variables' >> deploy/setup-service.ps1
          echo 'Write-Host "Setting environment variables..."' >> deploy/setup-service.ps1
          echo '[Environment]::SetEnvironmentVariable("PORT", "8080", "Machine")' >> deploy/setup-service.ps1
          echo '[Environment]::SetEnvironmentVariable("JWT_SECRET", "your_secret_here", "Machine")' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Try to stop existing service if running' >> deploy/setup-service.ps1
          echo 'Write-Host "Checking for existing service..."' >> deploy/setup-service.ps1
          echo 'try {' >> deploy/setup-service.ps1
          echo '  Stop-Service -Name GoAppService -ErrorAction SilentlyContinue' >> deploy/setup-service.ps1
          echo '  Write-Host "Stopped existing service."' >> deploy/setup-service.ps1
          echo '} catch {' >> deploy/setup-service.ps1
          echo '  Write-Host "No existing service found or could not stop it."' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Check if NSSM is available' >> deploy/setup-service.ps1
          echo 'Write-Host "Checking for NSSM..."' >> deploy/setup-service.ps1
          echo '$nssmPath = ""' >> deploy/setup-service.ps1
          echo 'if (Test-Path "C:\Program Files\nssm\nssm.exe") {' >> deploy/setup-service.ps1
          echo '  $nssmPath = "C:\Program Files\nssm\nssm.exe"' >> deploy/setup-service.ps1
          echo '  Write-Host "Found NSSM at: $nssmPath"' >> deploy/setup-service.ps1
          echo '} elseif (Test-Path "C:\nssm\nssm.exe") {' >> deploy/setup-service.ps1
          echo '  $nssmPath = "C:\nssm\nssm.exe"' >> deploy/setup-service.ps1
          echo '  Write-Host "Found NSSM at: $nssmPath"' >> deploy/setup-service.ps1
          echo '} else {' >> deploy/setup-service.ps1
          echo '  Write-Host "NSSM not found."' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo 'if ($nssmPath -ne "") {' >> deploy/setup-service.ps1
          echo '  # Create/update the service using NSSM' >> deploy/setup-service.ps1
          echo '  Write-Host "Using NSSM to create service at: $PSScriptRoot\app.exe"' >> deploy/setup-service.ps1
          echo '  & $nssmPath install GoAppService "$PSScriptRoot\app.exe"' >> deploy/setup-service.ps1
          echo '  & $nssmPath set GoAppService AppDirectory "$PSScriptRoot"' >> deploy/setup-service.ps1
          echo '  & $nssmPath set GoAppService AppEnvironmentExtra "PORT=8080" "JWT_SECRET=your_secret_here"' >> deploy/setup-service.ps1
          echo '  & $nssmPath start GoAppService' >> deploy/setup-service.ps1
          echo '  Write-Host "Service created and started with NSSM."' >> deploy/setup-service.ps1
          echo '} else {' >> deploy/setup-service.ps1
          echo '  # Fallback to running the batch file' >> deploy/setup-service.ps1
          echo '  Write-Host "NSSM not found, running app directly"' >> deploy/setup-service.ps1
          echo '  # Run in foreground to catch any immediate errors' >> deploy/setup-service.ps1
          echo '  Write-Host "First, trying to run app in foreground to check for immediate errors:"' >> deploy/setup-service.ps1
          echo '  try {' >> deploy/setup-service.ps1
          echo '    Set-Location $PSScriptRoot' >> deploy/setup-service.ps1 
          echo '    $env:PORT = "8080"' >> deploy/setup-service.ps1
          echo '    $env:JWT_SECRET = "your_secret_here"' >> deploy/setup-service.ps1
          echo '    Start-Process -FilePath "$PSScriptRoot\app.exe" -NoNewWindow -Wait -ErrorAction SilentlyContinue -ErrorVariable startError' >> deploy/setup-service.ps1
          echo '    if ($startError) {' >> deploy/setup-service.ps1
          echo '      Write-Host "Error starting app: $startError"' >> deploy/setup-service.ps1
          echo '    }' >> deploy/setup-service.ps1
          echo '  } catch {' >> deploy/setup-service.ps1
          echo '    Write-Host "Exception while starting app: $_"' >> deploy/setup-service.ps1
          echo '  }' >> deploy/setup-service.ps1
          echo '  # Now start in background with the batch file' >> deploy/setup-service.ps1
          echo '  Write-Host "Now starting app in background via batch file:"' >> deploy/setup-service.ps1
          echo '  Start-Process -FilePath "$PSScriptRoot\start-app.bat" -WindowStyle Hidden' >> deploy/setup-service.ps1
          echo '  Write-Host "Started app via batch file."' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Verify app is running' >> deploy/setup-service.ps1
          echo 'Write-Host "Checking if app is running..."' >> deploy/setup-service.ps1
          echo '$running = netstat -ano | Select-String -Pattern ":8080"' >> deploy/setup-service.ps1
          echo 'if ($running) {' >> deploy/setup-service.ps1
          echo '  Write-Host "App is running and listening on port 8080!"' >> deploy/setup-service.ps1
          echo '} else {' >> deploy/setup-service.ps1
          echo '  Write-Host "WARNING: App does not appear to be running on port 8080."' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo 'Write-Host "Setup complete!"' >> deploy/setup-service.ps1
          # Convert PowerShell script to Windows line endings
          sed -i 's/$/\r/' deploy/setup-service.ps1

      # Install necessary tools
      - name: Install SSH tools
        run: sudo apt-get install -y openssh-client sshpass

      # Deploy using password
      - name: Deploy with password
        run: |
          echo "Attempting deployment using password authentication..."
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Disable StrictHostKeyChecking for this deployment
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create deployment directory on remote server first (Windows compatible)
          echo "Creating directories on Windows server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"if not exist C:\GoApp mkdir C:\GoApp && if not exist C:\GoApp\build mkdir C:\GoApp\build\""

          # Copy files with absolute paths and detailed logging
          echo "Copying files with SCP..."

          # Copy app.exe
          echo "Copying app.exe..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/app.exe ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy farm.db
          echo "Copying farm.db..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/farm.db ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy start-app.bat
          echo "Copying start-app.bat..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/start-app.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy setup-service.ps1
          echo "Copying setup-service.ps1..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/setup-service.ps1 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Create a file list
          echo "Listing all files to be copied to build directory..."
          ls -la deploy/build/

          # Copy build directory files
          echo "Copying build directory files..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/build/

          # Verify the files were copied
          echo "Verifying files were copied..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\""
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\build\""

          # Run the setup script on the remote server (use cmd.exe to ensure PowerShell starts correctly)
          echo "Running setup script..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"cd C:\GoApp && powershell -ExecutionPolicy Bypass -NoProfile -File C:\GoApp\setup-service.ps1\""
        continue-on-error: true

      # Deploy using SSH key as fallback
      - name: Deploy with SSH key
        if: ${{ failure() }}
        run: |
          echo "Attempting deployment using SSH key authentication..."
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create deployment directory on remote server first (Windows compatible)
          echo "Creating directories on Windows server..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"if not exist C:\GoApp mkdir C:\GoApp && if not exist C:\GoApp\build mkdir C:\GoApp\build\""

          # Copy files with absolute paths and detailed logging
          echo "Copying files with SCP..."

          # Copy app.exe
          echo "Copying app.exe..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/app.exe ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy farm.db
          echo "Copying farm.db..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/farm.db ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy start-app.bat
          echo "Copying start-app.bat..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/start-app.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy setup-service.ps1
          echo "Copying setup-service.ps1..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/setup-service.ps1 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Create a file list
          echo "Listing all files to be copied to build directory..."
          ls -la deploy/build/

          # Copy build directory files
          echo "Copying build directory files..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/build/

          # Verify the files were copied
          echo "Verifying files were copied..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\""
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\build\""

          # Run the setup script on the remote server (use cmd.exe to ensure PowerShell starts correctly)
          echo "Running setup script..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"cd C:\GoApp && powershell -ExecutionPolicy Bypass -NoProfile -File C:\GoApp\setup-service.ps1\""
        continue-on-error: true

      # Manual instructions if all else fails
      - name: Deployment failure instructions
        if: ${{ failure() }}
        run: |
          echo "Automated deployment failed. Please try manual deployment:"
          echo "1. Download artifacts from this build"
          echo "2. Copy files to your Windows server at: ${{ secrets.DEPLOY_PATH }}"
          echo "3. Run the setup-service.ps1 script with PowerShell or manually start app.exe"
