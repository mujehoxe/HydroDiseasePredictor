name: Build and Deploy to WSL

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Update API URLs to local
        run: |
          chmod +x ./update-api-urls.sh
          ./update-api-urls.sh

      - name: Build frontend
        run: npm run build
        env:
          VITE_API_URL: "/api/v1" # Use local API path for production

      # Setup Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      # Build Go application for Linux (WSL) - with CGO enabled for SQLite
      - name: Build Go application
        run: |
          cd backend
          # Install SQLite development libraries
          sudo apt-get update && sudo apt-get install -y libsqlite3-dev
          # Build with CGO enabled for SQLite support
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o app
          # Verify it's a Linux binary
          file app

      # Copy frontend build to backend folder for deployment
      - name: Copy frontend to backend
        run: |
          mkdir -p backend/build
          cp -r dist/* backend/build/

      # Install necessary tools
      - name: Install SSH tools
        run: sudo apt-get install -y openssh-client sshpass

      # Deploy to Windows server using WSL
      - name: Deploy with WSL
        run: |
          echo "Attempting WSL deployment..."
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Disable StrictHostKeyChecking for this deployment
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create app directory in WSL
          echo "Creating deployment directory in WSL..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl --exec bash -c \"mkdir -p /mnt/c/wsl-app\""

          # Create deployment package
          echo "Creating deployment package..."
          tar -czf deployment.tar.gz -C backend .

          # Copy files to server
          echo "Copying files to server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -P ${{ secrets.SSH_PORT }} deployment.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:"C:\\wsl-app\\deployment.tar.gz"

          # Extract files
          echo "Extracting files..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl --exec bash -c \"cd /mnt/c/wsl-app && tar -xzf deployment.tar.gz\""

          # Modified: Stop any existing app with error handling
          echo "Stopping any existing app..."
          set +e  # Don't exit on error for this command
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"echo 'Checking for running processes...' && ps aux | grep -v grep | grep app && echo 'Found process, attempting to kill...' && pkill -f /mnt/c/wsl-app/app && echo 'Process stopped' || echo 'No process found to stop'\""
          set -e  # Resume exit on error for subsequent commands

          # Continue with remaining deployment regardless of stop result
          echo "Continuing deployment..."

          # Install required libraries
          echo "Installing required libraries..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"apt-get update > /dev/null 2>&1 && apt-get install -y libsqlite3-0 > /dev/null 2>&1 || echo 'Failed to install libraries'\""

          # Create start script
          echo "Creating start script..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"echo '#!/bin/bash' > /mnt/c/wsl-app/start.sh && echo 'cd /mnt/c/wsl-app' >> /mnt/c/wsl-app/start.sh && echo 'export PORT=8080' >> /mnt/c/wsl-app/start.sh && echo 'export JWT_SECRET=test_secret' >> /mnt/c/wsl-app/start.sh && echo 'nohup ./app > app.log 2>&1 &' >> /mnt/c/wsl-app/start.sh && chmod +x /mnt/c/wsl-app/start.sh\""

          # Start the application
          echo "Starting application..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"cd /mnt/c/wsl-app && ./start.sh\""

          # Create Windows startup batch file
          echo "Creating Windows startup file..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"echo @echo off > C:\\wsl-app\\start-app.bat && echo start /min wsl -d Ubuntu -e /mnt/c/wsl-app/start.sh >> C:\\wsl-app\\start-app.bat\""

          # Copy to startup folder
          echo "Setting up Windows startup..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "powershell -Command \"Copy-Item 'C:\\wsl-app\\start-app.bat' -Destination ([Environment]::GetFolderPath('Startup')) -Force\""

          # Check if application is running
          echo "Checking if application is running..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"ps aux | grep -v grep | grep app || echo 'Process not found'\""

          # Check if port is open
          echo "Checking if port is open..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"netstat -tulpn | grep 8080 || echo 'Port 8080 not found'\""

          # Display logs
          echo "Application logs:"
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "wsl bash -c \"cat /mnt/c/wsl-app/app.log 2>/dev/null || echo 'No logs found'\""

      # Manual instructions if all else fails
      - name: Deployment failure instructions
        if: ${{ failure() }}
        run: |
          echo "Automated deployment failed. Please deploy manually:"
          echo "1. Install WSL on your Windows server"
          echo "2. Create directory: mkdir -p C:\\wsl-app"
          echo "3. Copy backend files to C:\\wsl-app"
          echo "4. In WSL, run: cd /mnt/c/wsl-app && export PORT=8080 && ./app"
