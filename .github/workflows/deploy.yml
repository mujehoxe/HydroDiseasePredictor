name: Build and Deploy

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Update API URLs to local
        run: |
          chmod +x ./update-api-urls.sh
          ./update-api-urls.sh

      - name: Build frontend
        run: npm run build
        env:
          VITE_API_URL: "/api/v1" # Use local API path for production

      # Setup Go for backend
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Build Go backend
        run: |
          # Install Windows cross-compiler for CGO
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64

          cd backend
          # Build for Windows target with CGO enabled
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc go build -o app.exe
          # Copy frontend build to the backend/build directory
          mkdir -p build
          cp -r ../dist/* build/

      - name: Prepare for deployment
        run: |
          # Create deployment directory with backend and frontend
          mkdir -p deploy
          cp -r backend/app.exe deploy/
          cp -r backend/build deploy/
          cp -r backend/farm.db deploy/ || true

      # Install necessary tools
      - name: Install SSH tools
        run: sudo apt-get install -y openssh-client sshpass

      # Deploy using password
      - name: Deploy with password
        run: |
          echo "Attempting deployment using password authentication..."
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Disable StrictHostKeyChecking for this deployment
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create deployment directory on remote server
          echo "Creating directory on Windows server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"if not exist C:\GoApp mkdir C:\GoApp\""

          # Stop any running instances of the app
          echo "Stopping any running app processes..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"taskkill /F /IM app.exe /T 2>nul || echo No process to kill\""

          # Wait a moment for processes to fully stop
          echo "Waiting for processes to stop..."
          sleep 2

          # Copy files
          echo "Copying files..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -P ${{ secrets.SSH_PORT }} deploy/app.exe ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -P ${{ secrets.SSH_PORT }} deploy/farm.db ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Create and copy PowerShell script
          echo "Creating and copying PowerShell launcher..."
          echo 'Set-Location -Path "C:\GoApp"' > launch.ps1
          echo '$env:PORT = "8080"' >> launch.ps1  # Change back to just the port number
          echo '$env:JWT_SECRET = "your_secret_here"' >> launch.ps1
          echo 'Write-Host "Starting application with PORT=$env:PORT"' >> launch.ps1
          echo 'try {' >> launch.ps1
          echo '  $process = Start-Process -FilePath "C:\GoApp\app.exe" -PassThru -WindowStyle Normal' >> launch.ps1
          echo '  $processId = $process.Id' >> launch.ps1
          echo '  $processId | Out-File -FilePath "C:\GoApp\app.pid"' >> launch.ps1
          echo '  Write-Host "Application started with PID: $processId"' >> launch.ps1
          echo '  Start-Sleep -Seconds 3' >> launch.ps1
          echo '  $isRunning = Get-Process -Id $processId -ErrorAction SilentlyContinue' >> launch.ps1
          echo '  if ($isRunning) {' >> launch.ps1
          echo '    Write-Host "Process is still running"' >> launch.ps1
          echo '    $ports = netstat -ano | findstr ":8080"' >> launch.ps1
          echo '    if ($ports) {' >> launch.ps1
          echo '      Write-Host "Port 8080 is in use by process:"' >> launch.ps1
          echo '      Write-Host $ports' >> launch.ps1
          echo '    } else {' >> launch.ps1
          echo '      Write-Host "Port 8080 is not in use"' >> launch.ps1
          echo '    }' >> launch.ps1
          echo '  } else {' >> launch.ps1
          echo '    Write-Host "WARNING: Process is no longer running!"' >> launch.ps1
          echo '    # Try running directly to capture output' >> launch.ps1
          echo '    Write-Host "Running app directly to capture output:"' >> launch.ps1
          echo '    try {' >> launch.ps1
          echo '      $output = & "C:\GoApp\app.exe" 2>&1' >> launch.ps1
          echo '      $output | Out-File -FilePath "C:\GoApp\direct_output.log"' >> launch.ps1
          echo '      Write-Host $output' >> launch.ps1
          echo '    } catch {' >> launch.ps1
          echo '      Write-Host "Error running app directly: $_"' >> launch.ps1
          echo '    }' >> launch.ps1
          echo '  }' >> launch.ps1
          echo '} catch {' >> launch.ps1
          echo '  Write-Host "Error starting process: $_"' >> launch.ps1
          echo '}' >> launch.ps1

          # Create and copy batch wrapper
          echo "Creating and copying batch wrapper..."
          echo '@echo off' > run.bat
          echo 'powershell -ExecutionPolicy Bypass -File C:\GoApp\launch.ps1' >> run.bat

          # Copy scripts to server
          echo "Copying scripts to server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -P ${{ secrets.SSH_PORT }} launch.ps1 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -P ${{ secrets.SSH_PORT }} run.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Run the application
          echo "Starting application..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"cd C:\GoApp && run.bat\""

          # Check final status - using double quotes properly for PowerShell command
          echo "Checking application status..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"echo === PID FILE === && type C:\\GoApp\\app.pid && echo === DIRECT OUTPUT === && type C:\\GoApp\\direct_output.log 2>nul || echo No direct output log && echo === PORT CHECK === && netstat -ano | findstr :8080\""

      # Manual instructions if all else fails
      - name: Deployment failure instructions
        if: ${{ failure() }}
        run: |
          echo "Automated deployment failed. Please try manual deployment:"
          echo "1. Download artifacts from this build"
          echo "2. Copy files to your Windows server at: ${{ secrets.DEPLOY_PATH }}"
          echo "3. Run the setup-service.ps1 script with PowerShell or manually start app.exe"
