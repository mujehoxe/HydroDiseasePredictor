name: Build and Deploy

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm install

      - name: Update API URLs to local
        run: |
          chmod +x ./update-api-urls.sh
          ./update-api-urls.sh

      - name: Build frontend
        run: npm run build
        env:
          VITE_API_URL: "/api/v1" # Use local API path for production

      # Setup Go for backend
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Build Go backend
        run: |
          # Install Windows cross-compiler for CGO
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64

          cd backend
          # Build for Windows target with CGO enabled
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc go build -o app.exe
          # Copy frontend build to the backend/build directory
          mkdir -p build
          cp -r ../dist/* build/

      - name: Prepare for deployment
        run: |
          # Create deployment directory with backend and frontend
          mkdir -p deploy
          cp -r backend/app.exe deploy/
          cp -r backend/build deploy/
          cp -r backend/farm.db deploy/ || true

          # Create a batch file to start the app on Windows with proper Windows line endings
          echo '@echo on' > deploy/start-app.bat
          echo 'setx PORT 8080' >> deploy/start-app.bat
          echo 'setx JWT_SECRET your_secret_here' >> deploy/start-app.bat
          echo 'set PORT=8080' >> deploy/start-app.bat
          echo 'set JWT_SECRET=your_secret_here' >> deploy/start-app.bat
          echo 'cd /d "%~dp0"' >> deploy/start-app.bat
          echo 'echo %DATE% %TIME% - Starting application on port %PORT%... >> app.log' >> deploy/start-app.bat
          echo 'echo Current directory: %CD% >> app.log' >> deploy/start-app.bat
          echo 'echo Environment variables: >> app.log' >> deploy/start-app.bat
          echo 'echo PORT=%PORT% >> app.log' >> deploy/start-app.bat
          echo 'echo JWT_SECRET=%JWT_SECRET% >> app.log' >> deploy/start-app.bat
          echo 'echo Files in directory: >> app.log' >> deploy/start-app.bat
          echo 'dir >> app.log' >> deploy/start-app.bat
          echo 'echo. >> app.log' >> deploy/start-app.bat
          echo 'echo Starting app.exe... >> app.log' >> deploy/start-app.bat
          echo 'app.exe >> app.log 2>&1' >> deploy/start-app.bat
          echo 'if %ERRORLEVEL% NEQ 0 (' >> deploy/start-app.bat
          echo '  echo %DATE% %TIME% - ERROR: Application failed to start with code %ERRORLEVEL% >> app.log' >> deploy/start-app.bat
          echo ')' >> deploy/start-app.bat
          # Convert to Windows line endings
          sed -i 's/$/\r/' deploy/start-app.bat

          # Create a service restart script
          echo '@echo on' > deploy/restart-service.bat
          echo 'echo %DATE% %TIME% - Restarting application... >> app.log' >> deploy/restart-service.bat
          echo 'taskkill /F /IM app.exe /T' >> deploy/restart-service.bat
          echo 'echo %DATE% %TIME% - Stopped previous instance >> app.log' >> deploy/restart-service.bat
          echo 'timeout /t 2' >> deploy/restart-service.bat
          echo 'cd /d "%~dp0"' >> deploy/restart-service.bat
          echo 'echo %DATE% %TIME% - Starting application in background... >> app.log' >> deploy/restart-service.bat
          echo 'echo Current directory: %CD% >> app.log' >> deploy/restart-service.bat
          echo 'echo Environment variables: >> app.log' >> deploy/restart-service.bat
          echo 'echo PORT=%PORT% >> app.log' >> deploy/restart-service.bat
          echo 'echo JWT_SECRET=%JWT_SECRET% >> app.log' >> deploy/restart-service.bat
          echo 'start /b cmd /c "app.exe >> app.log 2>&1"' >> deploy/restart-service.bat
          echo 'echo %DATE% %TIME% - Started application process >> app.log' >> deploy/restart-service.bat
          echo 'timeout /t 5' >> deploy/restart-service.bat
          echo 'echo %DATE% %TIME% - Checking if application is running... >> app.log' >> deploy/restart-service.bat
          echo 'netstat -ano | findstr :8080 >> app.log' >> deploy/restart-service.bat
          echo 'if %ERRORLEVEL% NEQ 0 (' >> deploy/restart-service.bat
          echo '  echo %DATE% %TIME% - WARNING: Application may not be running on port 8080 >> app.log' >> deploy/restart-service.bat
          echo '  echo Check application log for errors >> app.log' >> deploy/restart-service.bat
          echo ')' >> deploy/restart-service.bat
          # Convert to Windows line endings
          sed -i 's/$/\r/' deploy/restart-service.bat

          # Create a diagnostic batch file
          echo '@echo on' > deploy/diagnostics.bat
          echo 'echo === APPLICATION STATUS ===' >> deploy/diagnostics.bat
          echo 'echo.' >> deploy/diagnostics.bat
          echo 'echo Checking if app is running:' >> deploy/diagnostics.bat
          echo 'tasklist | findstr app.exe' >> deploy/diagnostics.bat
          echo 'echo.' >> deploy/diagnostics.bat
          echo 'echo Checking if port 8080 is open:' >> deploy/diagnostics.bat
          echo 'netstat -ano | findstr :8080' >> deploy/diagnostics.bat
          echo 'echo.' >> deploy/diagnostics.bat
          echo 'echo === ENVIRONMENT VARIABLES ===' >> deploy/diagnostics.bat
          echo 'echo PORT=%PORT%' >> deploy/diagnostics.bat
          echo 'echo JWT_SECRET=%JWT_SECRET%' >> deploy/diagnostics.bat
          echo 'echo.' >> deploy/diagnostics.bat
          echo 'echo === LAST 10 LINES OF LOG ===' >> deploy/diagnostics.bat
          echo 'powershell -Command "if (Test-Path app.log) { Get-Content app.log -Tail 10 } else { echo \"Log file not found\" }"' >> deploy/diagnostics.bat
          echo 'echo.' >> deploy/diagnostics.bat
          echo 'echo === RESTART OPTIONS ===' >> deploy/diagnostics.bat
          echo 'echo 1. Press R to restart the application' >> deploy/diagnostics.bat
          echo 'echo 2. Press Q to exit' >> deploy/diagnostics.bat
          echo 'choice /C RQ /N /M "Choose an option:"' >> deploy/diagnostics.bat
          echo 'if errorlevel 2 goto end' >> deploy/diagnostics.bat
          echo 'if errorlevel 1 goto restart' >> deploy/diagnostics.bat
          echo ':restart' >> deploy/diagnostics.bat
          echo 'echo Restarting application...' >> deploy/diagnostics.bat
          echo 'call restart-service.bat' >> deploy/diagnostics.bat
          echo 'goto end' >> deploy/diagnostics.bat
          echo ':end' >> deploy/diagnostics.bat
          echo 'exit' >> deploy/diagnostics.bat
          # Convert to Windows line endings
          sed -i 's/$/\r/' deploy/diagnostics.bat
          
          # Create PowerShell script for setting up the service
          echo 'Write-Host "Starting service setup..."' > deploy/setup-service.ps1
          echo '$ErrorActionPreference = "Continue"' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Debug - show current directory' >> deploy/setup-service.ps1
          echo 'Write-Host "Current directory: $pwd"' >> deploy/setup-service.ps1
          echo 'Write-Host "Listing files in current directory:"' >> deploy/setup-service.ps1
          echo 'Get-ChildItem' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Verify database file exists and is accessible' >> deploy/setup-service.ps1
          echo 'if (Test-Path "farm.db") {' >> deploy/setup-service.ps1
          echo '    Write-Host "Database file found: farm.db"' >> deploy/setup-service.ps1
          echo '    # Check if the file can be read/written' >> deploy/setup-service.ps1
          echo '    try {' >> deploy/setup-service.ps1
          echo '        $dbTest = [System.IO.File]::Open("$PSScriptRoot\farm.db", [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite)' >> deploy/setup-service.ps1
          echo '        $dbTest.Close()' >> deploy/setup-service.ps1
          echo '        Write-Host "Database file is accessible with read/write permissions"' >> deploy/setup-service.ps1
          echo '    } catch {' >> deploy/setup-service.ps1
          echo '        Write-Host "WARNING: Database file exists but may not be accessible: $_"' >> deploy/setup-service.ps1
          echo '    }' >> deploy/setup-service.ps1
          echo '} else {' >> deploy/setup-service.ps1
          echo '    Write-Host "WARNING: Database file not found! The application may not start correctly."' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Set environment variables' >> deploy/setup-service.ps1
          echo 'Write-Host "Setting environment variables..."' >> deploy/setup-service.ps1
          echo '[Environment]::SetEnvironmentVariable("PORT", "8080", "Machine")' >> deploy/setup-service.ps1
          echo '[Environment]::SetEnvironmentVariable("JWT_SECRET", "your_secret_here", "Machine")' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Kill any existing processes' >> deploy/setup-service.ps1
          echo 'Write-Host "Killing any existing app processes..."' >> deploy/setup-service.ps1
          echo 'Get-Process -Name "app" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# Start the application in the background' >> deploy/setup-service.ps1
          echo 'Write-Host "Starting application in background..."' >> deploy/setup-service.ps1
          echo 'try {' >> deploy/setup-service.ps1
          echo '    $startAppProcess = Start-Process -FilePath "$PSScriptRoot\start-app.bat" -WindowStyle Hidden -PassThru -ErrorAction Stop' >> deploy/setup-service.ps1
          echo '    Write-Host "Process started with ID: $($startAppProcess.Id)"' >> deploy/setup-service.ps1
          echo '    # Wait a moment to see if it crashes immediately' >> deploy/setup-service.ps1
          echo '    Start-Sleep -Seconds 1' >> deploy/setup-service.ps1
          echo '    if ($startAppProcess.HasExited) {' >> deploy/setup-service.ps1
          echo '        Write-Host "ERROR: Process exited immediately with code $($startAppProcess.ExitCode)"' >> deploy/setup-service.ps1
          echo '        Write-Host "Checking application log for errors:"' >> deploy/setup-service.ps1
          echo '        if (Test-Path "$PSScriptRoot\app.log") {' >> deploy/setup-service.ps1
          echo '            Get-Content "$PSScriptRoot\app.log" -Tail 20' >> deploy/setup-service.ps1
          echo '        } else {' >> deploy/setup-service.ps1
          echo '            Write-Host "No log file found"' >> deploy/setup-service.ps1
          echo '        }' >> deploy/setup-service.ps1
          echo '    }' >> deploy/setup-service.ps1
          echo '} catch {' >> deploy/setup-service.ps1
          echo '    Write-Host "ERROR: Failed to start application: $_"' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo '# More thorough port check' >> deploy/setup-service.ps1
          echo 'Write-Host "Checking if application is listening on port 8080..."' >> deploy/setup-service.ps1
          echo 'function Check-Port {' >> deploy/setup-service.ps1
          echo '    $portCheck = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue' >> deploy/setup-service.ps1
          echo '    return $portCheck -ne $null' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo 'if (Check-Port) {' >> deploy/setup-service.ps1
          echo '    Write-Host "SUCCESS: App is running and listening on port 8080!"' >> deploy/setup-service.ps1
          echo '} else {' >> deploy/setup-service.ps1
          echo '    Write-Host "Port not open yet, waiting 10 seconds..."' >> deploy/setup-service.ps1
          echo '    Start-Sleep -Seconds 10' >> deploy/setup-service.ps1
          echo '    if (Check-Port) {' >> deploy/setup-service.ps1
          echo '        Write-Host "SUCCESS: App is now running and listening on port 8080!"' >> deploy/setup-service.ps1
          echo '    } else {' >> deploy/setup-service.ps1
          echo '        Write-Host "ERROR: App does not appear to be running on port 8080."' >> deploy/setup-service.ps1
          echo '        Write-Host "Checking for app process..."' >> deploy/setup-service.ps1
          echo '        $appProcess = Get-Process -Name "app" -ErrorAction SilentlyContinue' >> deploy/setup-service.ps1
          echo '        if ($appProcess) {' >> deploy/setup-service.ps1
          echo '            Write-Host "Process is running but not listening on port 8080."' >> deploy/setup-service.ps1
          echo '        } else {' >> deploy/setup-service.ps1
          echo '            Write-Host "Process is not running!"' >> deploy/setup-service.ps1
          echo '        }' >> deploy/setup-service.ps1
          echo '        Write-Host "Checking application log for errors:"' >> deploy/setup-service.ps1
          echo '        if (Test-Path "$PSScriptRoot\app.log") {' >> deploy/setup-service.ps1
          echo '            Get-Content "$PSScriptRoot\app.log" -Tail 30' >> deploy/setup-service.ps1
          echo '        } else {' >> deploy/setup-service.ps1
          echo '            Write-Host "No log file found"' >> deploy/setup-service.ps1
          echo '        }' >> deploy/setup-service.ps1
          echo '        Write-Host "Checking Windows Event Log for errors:"' >> deploy/setup-service.ps1
          echo '        Get-EventLog -LogName Application -Newest 10 -EntryType Error -ErrorAction SilentlyContinue | Select-Object TimeGenerated, Source, Message' >> deploy/setup-service.ps1
          echo '    }' >> deploy/setup-service.ps1
          echo '}' >> deploy/setup-service.ps1
          echo '' >> deploy/setup-service.ps1
          echo 'Write-Host "Setup complete! The app should be running in the background."' >> deploy/setup-service.ps1
          # Convert PowerShell script to Windows line endings
          sed -i 's/$/\r/' deploy/setup-service.ps1

          # Create a direct-run batch file for debugging
          echo '@echo on' > deploy/direct-run.bat
          echo 'set PORT=8080' >> deploy/direct-run.bat
          echo 'set JWT_SECRET=your_secret_here' >> deploy/direct-run.bat
          echo 'cd /d "%~dp0"' >> deploy/direct-run.bat
          echo 'echo Running app.exe directly with console output...' >> deploy/direct-run.bat
          echo 'echo.' >> deploy/direct-run.bat
          echo 'app.exe' >> deploy/direct-run.bat
          echo 'echo.' >> deploy/direct-run.bat
          echo 'echo Application exited with code %ERRORLEVEL%' >> deploy/direct-run.bat
          echo 'pause' >> deploy/direct-run.bat
          # Convert to Windows line endings
          sed -i 's/$/\r/' deploy/direct-run.bat

      # Install necessary tools
      - name: Install SSH tools
        run: sudo apt-get install -y openssh-client sshpass

      # Deploy using password
      - name: Deploy with password
        run: |
          echo "Attempting deployment using password authentication..."
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Disable StrictHostKeyChecking for this deployment
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create deployment directory and build subdirectory on remote server first (Windows compatible)
          echo "Creating directories on Windows server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"if not exist C:\GoApp mkdir C:\GoApp && if not exist C:\GoApp\build mkdir C:\GoApp\build\""

          # Stop any running instances of the app
          echo "Stopping any running app processes..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"taskkill /F /IM app.exe /T 2>nul || echo No process to kill\""

          # Wait a moment for processes to fully stop
          echo "Waiting for processes to stop..."
          sleep 2

          # Copy files with absolute paths and detailed logging
          echo "Copying files with SCP..."

          # Copy app.exe
          echo "Copying app.exe..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/app.exe ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy farm.db
          echo "Copying farm.db..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/farm.db ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy start-app.bat
          echo "Copying start-app.bat..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/start-app.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy setup-service.ps1
          echo "Copying setup-service.ps1..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/setup-service.ps1 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy diagnostics.bat
          echo "Copying diagnostics.bat..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/diagnostics.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/
          
          # Copy direct-run.bat
          echo "Copying direct-run.bat..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -r -P ${{ secrets.SSH_PORT }} deploy/direct-run.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Verify the files were copied
          echo "Verifying files were copied..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\""
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\build\""

          # Run the setup script on the remote server (use cmd.exe to ensure PowerShell starts correctly)
          echo "Running setup script..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"cd C:\GoApp && powershell -ExecutionPolicy Bypass -NoProfile -Command \"Start-Process powershell -ArgumentList '-ExecutionPolicy Bypass -NoProfile -File C:\GoApp\setup-service.ps1' -WindowStyle Hidden\"\""

          # Verify the app is running (give it a moment to start)
          echo "Waiting for app to start..."
          sleep 10
          echo "Checking if app is running..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"netstat -ano | findstr :8080\""

          # Retrieve the log file to diagnose startup issues
          echo "Retrieving application log file..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"type C:\GoApp\app.log\""
        continue-on-error: true

      # Deploy using SSH key as fallback
      - name: Deploy with SSH key
        if: ${{ failure() }}
        run: |
          echo "Attempting deployment using SSH key authentication..."
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" > ~/.ssh/config

          # Create deployment directory and build subdirectory on remote server first (Windows compatible)
          echo "Creating directories on Windows server..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"if not exist C:\GoApp mkdir C:\GoApp && if not exist C:\GoApp\build mkdir C:\GoApp\build\""

          # Stop any running instances of the app
          echo "Stopping any running app processes..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"taskkill /F /IM app.exe /T 2>nul || echo No process to kill\""

          # Wait a moment for processes to fully stop
          echo "Waiting for processes to stop..."
          sleep 2

          # Copy files with absolute paths and detailed logging
          echo "Copying files with SCP..."

          # Copy app.exe
          echo "Copying app.exe..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/app.exe ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy farm.db
          echo "Copying farm.db..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/farm.db ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy start-app.bat
          echo "Copying start-app.bat..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/start-app.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy setup-service.ps1
          echo "Copying setup-service.ps1..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/setup-service.ps1 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Copy diagnostics.bat
          echo "Copying diagnostics.bat..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/diagnostics.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/
          
          # Copy direct-run.bat
          echo "Copying direct-run.bat..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/direct-run.bat ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/

          # Create a file list
          echo "Listing all files to be copied to build directory..."
          ls -la deploy/build/

          # Copy build directory files
          echo "Copying build directory files..."
          scp -v -r -P ${{ secrets.SSH_PORT }} deploy/build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:C:/GoApp/build/

          # Verify the files were copied
          echo "Verifying files were copied..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\""
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"dir C:\GoApp\build\""

          # Run the setup script on the remote server (use cmd.exe to ensure PowerShell starts correctly)
          echo "Running setup script..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"cd C:\GoApp && powershell -ExecutionPolicy Bypass -NoProfile -Command \"Start-Process powershell -ArgumentList '-ExecutionPolicy Bypass -NoProfile -File C:\GoApp\setup-service.ps1' -WindowStyle Hidden\"\""

          # Verify the app is running (give it a moment to start)
          echo "Waiting for app to start..."
          sleep 10
          echo "Checking if app is running..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"netstat -ano | findstr :8080\""

          # Retrieve the log file to diagnose startup issues
          echo "Retrieving application log file..."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cmd /c \"type C:\GoApp\app.log\""
        continue-on-error: true

      # Manual instructions if all else fails
      - name: Deployment failure instructions
        if: ${{ failure() }}
        run: |
          echo "Automated deployment failed. Please try manual deployment:"
          echo "1. Download artifacts from this build"
          echo "2. Copy files to your Windows server at: ${{ secrets.DEPLOY_PATH }}"
          echo "3. Run the setup-service.ps1 script with PowerShell or manually start app.exe"
